{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Sol",
  "scopeName": "source.sl",
  "patterns": [
    { "include": "#comments" },
    { "include": "#definitions" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#function-calls" },
    { "include": "#types" },
    { "include": "#instanceVariables" },
    { "include": "#variables" },
    { "include": "#operators" },
    { "include": "#braces" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.sl",
          "match": "#.*$"
        }
      ]
    },
    "definitions": {
      "patterns": [
        {
          "name": "meta.function.prototype.sl",
          "begin": "^\\s*(def\\.ext)\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "keyword.control.def.sl" },
            "2": { "name": "entity.name.function.sl" }
          },
          "end": "$",
          "patterns": [
            {
              "name": "meta.parameters.sl",
              "begin": "\\(",
              "beginCaptures": { "0": { "name": "punctuation.definition.parameters.begin.sl" } },
              "end": "\\)",
              "endCaptures": { "0": { "name": "punctuation.definition.parameters.end.sl" } },
              "patterns": [
                { "include": "#parametersWithTypes" },
                { "include": "#types" }
              ]
            },
            { "include": "#returnTypeArrow" },
            { "include": "$self" }
          ]
        },
        {
          "name": "meta.class.sl",
          "begin": "^\\s*(class)\\s+([A-Z][A-Za-z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "keyword.control.class.sl" },
            "2": { "name": "entity.name.type.class.sl" }
          },
          "end": "^\\s*(end)\\s*$",
          "endCaptures": {
            "1": { "name": "keyword.control.end.sl" }
          },
          "patterns": [{ "include": "$self" }]
        },
        {
          "name": "meta.function.sl",
          "begin": "^\\s*(def(?:\\.class)?)\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "1": { "name": "keyword.control.def.sl" },
            "2": { "name": "entity.name.function.sl" }
          },
          "end": "^\\s*(end)\\s*$",
          "endCaptures": {
            "1": { "name": "keyword.control.end.sl" }
          },
          "patterns": [
            {
              "name": "meta.parameters.sl",
              "begin": "\\(",
              "beginCaptures": { "0": { "name": "punctuation.definition.parameters.begin.sl" } },
              "end": "\\)",
              "endCaptures": { "0": { "name": "punctuation.definition.parameters.end.sl" } },
              "patterns": [
                { "include": "#parametersWithTypes" },
                { "include": "#types" },
                { "include": "#variables" }
              ]
            },
            { "include": "$self" }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sl",
          "begin": "\"",
          "end": "\"",
          "patterns": [{ "name": "constant.character.escape.sl", "match": "\\\\." }]
        },
        {
          "name": "string.quoted.single.sl",
          "begin": "'",
          "end": "'",
          "patterns": [{ "name": "constant.character.escape.sl", "match": "\\\\." }]
        },
        {
          "name": "string.quoted.template.sl",
          "begin": "`",
          "end": "`",
          "patterns": [{ "name": "constant.character.escape.sl", "match": "\\\\." }]
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.integer.sl", "match": "\\b[0-9]+\\b" },
        { "name": "constant.numeric.float.sl", "match": "\\b[0-9]+\\.[0-9]+\\b" },
        { "name": "constant.numeric.hex.sl", "match": "\\b0x[0-9A-Fa-f_]+\\b" }
      ]
    },
    "keywords": {
      "patterns": [
        { "name": "keyword.control.sl", "match": "\\b(end|loop)\\b" },
        { "name": "variable.language.self.sl", "match": "\\bself\\b" },
        { "name": "constant.language.boolean.sl", "match": "\\b(true|false)\\b" },
        { "name": "keyword.operator.arrow.sl", "match": "->" }
      ]
    },
    "types": {
      "patterns": [
        { "name": "storage.type.primitive.sl", "match": "\\b(Int|Int32|Int64|BytePtr|Str|FnRef)\\b" },
        { "name": "entity.name.type.sl", "match": "\\b[A-Z][A-Za-z0-9_]*\\b" }
      ]
    },
    "braces": {
      "patterns": [
        { "name": "punctuation.section.block.begin.sl", "match": "\\{" },
        { "name": "punctuation.section.block.end.sl", "match": "\\}" }
      ]
    },
    "function-calls": {
      "patterns": [
        {
          "name": "meta.function-call.sl",
          "begin": "(\\b[A-Za-z_][A-Za-z0-9_]*)\\s*(\\()",
          "beginCaptures": {
            "1": { "name": "entity.name.function.call.sl" },
            "2": { "name": "punctuation.section.function.begin.sl" }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": { "name": "punctuation.section.function.end.sl" }
          },
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "punctuation.accessor.sl", "match": "\\." },
        { "name": "keyword.operator.sl", "match": "[+\\-*/%&|^!~=<>?:]+" }
      ]
    },
    "returnTypeArrow": {
      "patterns": [
        {
          "name": "meta.return-type.sl",
          "match": "(->)\\s*([A-Z][A-Za-z0-9_]*)",
          "captures": {
            "1": { "name": "keyword.operator.arrow.sl" },
            "2": { "name": "storage.type.sl" }
          }
        }
      ]
    },
    "instanceVariables": {
      "patterns": [
        {
          "name": "constant.language.symbol.sl",
          "match": "@[A-Za-z_][A-Za-z0-9_]*"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.sl",
          "match": "\\b[a-z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "parametersWithTypes": {
      "patterns": [
        {
          "name": "variable.parameter.sl",
          "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s+[A-Z][A-Za-z0-9_]*)"
        },
        {
          "name": "storage.type.sl",
          "match": "(?<=\\b[A-Za-z_][A-Za-z0-9_]*\\s+)[A-Z][A-Za-z0-9_]*"
        }
      ]
    }
  }
}
