{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Sol",
  "scopeName": "source.sl",
  "patterns": [
    { "include": "#comments" },
    {
      "include": "#definitions"
    },
    {
      "include": "#instanceVariables"
    },
    {
      "include": "#parametersWithTypes"
    },
    {
      "include": "#braces"
    },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#functions" },
    { "include": "#operators" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign",
          "match": "#.*$"
        }
      ]
    },
    "definitions": {
      "patterns": [
        {
          "name": "meta.function.prototype",
          "begin": "^\\s*(def\\.ext)\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration"
            },
            "2": {
              "name": "entity.name.function"
            }
          },
          "end": "$",
          "patterns": [
            {
              "include": "#instanceVariables"
            },
            {
              "include": "#parametersWithTypes"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#types"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#returnTypeArrow"
            }
          ]
        },
        {
          "name": "meta.class",
          "begin": "^\\s*(class)\\s+([A-Z][A-Za-z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration.class"
            },
            "2": {
              "name": "entity.name.type.class"
            }
          },
          "end": "^\\s*(end)\\s*$",
          "endCaptures": {
            "1": {
              "name": "keyword.control"
            }
          },
          "patterns": [
            {
              "include": "#classAttributes"
            },
            {
              "include": "#instanceVariables"
            },
            {
              "include": "#parametersWithTypes"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#functions"
            }
          ]
        },
        {
          "name": "meta.function",
          "begin": "^\\s*(def(?:\\.class)?)\\s+([A-Za-z_][A-Za-z0-9_]*)",
          "beginCaptures": {
            "1": {
              "name": "keyword.declaration"
            },
            "2": {
              "name": "entity.name.function"
            }
          },
          "end": "^\\s*(end)\\s*$",
          "endCaptures": {
            "1": {
              "name": "keyword.control"
            }
          },
          "patterns": [
            {
              "include": "#instanceVariables"
            },
            {
              "include": "#parametersWithTypes"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#numbers"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#operators"
            },
            {
              "include": "#types"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.template",
          "begin": "`",
          "end": "`",
          "patterns": [
            {
              "name": "constant.character.escape",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer",
          "match": "\\b0|[1-9]\\d*\\b"
        },
        {
          "name": "constant.numeric.float",
          "match": "\\b((\\d+\\.\\d*)|(\\.\\d+))(e[+-]?\\d+)?\\b"
        },
        {
          "name": "constant.numeric.hex",
          "match": "\\b0x[0-9A-Fa-f_]+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.declaration",
          "match": "\\bdef(\\.ext|\\.class)?\\b"
        },
        {
          "name": "keyword.declaration.class",
          "match": "\\bclass\\b"
        },
        {
          "name": "keyword.control",
          "match": "\\bend\\b"
        },
        {
          "name": "keyword.control.loop",
          "match": "\\bloop\\b"
        },
        {
          "name": "variable.language.self",
          "match": "\\bself\\b"
        },
        {
          "name": "constant.language.boolean",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "keyword.control.return",
          "match": "->"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive",
          "match": "\\b(Int|Int32|Int64|BytePtr|Str|FnRef)\\b"
        },
        {
          "name": "entity.name.type",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "braces": {
      "patterns": [
        {
          "name": "punctuation.section.block.begin.sl",
          "match": "\\{"
        },
        {
          "name": "punctuation.section.block.end.sl",
          "match": "\\}"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function",
          "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\s*(?=\\()"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator",
          "match": "[+\\-*/%&|^!~=<>?:]+"
        }
      ]
    },
    "returnTypeArrow": {
      "patterns": [
        {
          "name": "meta.return-type",
          "match": "(->)\\s*([A-Z][A-Za-z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.control.return"
            },
            "2": {
              "name": "storage.type"
            }
          }
        }
      ]
    },
    "instanceVariables": {
      "patterns": [
        {
          "name": "variable.other.property",
          "match": "@[A-Za-z_][A-Za-z0-9_]*"
        }
      ]
    },
    "classAttributes": {
      "patterns": [
        {
          "name": "meta.class.attribute",
          "match": "^\\s*(@[A-Za-z_][A-Za-z0-9_]*)\\s+([A-Z][A-Za-z0-9_]*)",
          "captures": {
            "1": {
              "name": "variable.other.property"
            },
            "2": {
              "name": "storage.type"
            }
          }
        }
      ]
    },
    "parametersWithTypes": {
      "patterns": [
        {
          "name": "variable.parameter",
          "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s+[A-Z][A-Za-z0-9_]*)"
        },
        {
          "name": "storage.type",
          "match": "(?<=\\b[A-Za-z_][A-Za-z0-9_]*\\s+)[A-Z][A-Za-z0-9_]*"
        }
      ]
    }
  },
  "fileTypes": ["sl"],
  "uuid": "b8e8d3c0-5f44-45b5-a0b6-1e9f4d6b8f30"
}
